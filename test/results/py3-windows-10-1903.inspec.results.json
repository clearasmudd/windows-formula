{"platform":{"name":"windows_10_enterprise_evaluation","release":"10.0.18362"},"profiles":[{"name":"default","sha256":"bed6ac877d8e684277b24f31a1e56c3729793e2a20075dc0d39ef037dbf6e22b","title":"SaltStack Windows Formula","maintainer":"SaltStack Formulas","summary":"Verify that the windows formula is setup and configured correctly","license":"Apache-2.0","supports":[{"platform-family":"windows"}],"attributes":[],"groups":[{"id":"controls/os.rb","controls":["Operating System"]},{"id":"controls/salt.formula.windows.system.packages.appx.rb","controls":["Windows AppX Provisioned Package Uninstalled"]},{"id":"controls/salt.formula.windows.system.packages.chocolatey.rb","controls":["Chocolatey Package Installed"]},{"id":"controls/salt.formula.windows.system.server.features.rb","controls":["Windows Features"]},{"id":"controls/salt.modules.chocolatey.rb","controls":["Chocolatey Installed"]},{"id":"controls/salt.states.timezone.rb","controls":["Windows Timezone"]},{"id":"controls/salt.states.win_dism.rb","controls":["Windows Optional Features"]},{"id":"controls/salt.states.win_system.rb","controls":["Windows Computer Hostname","Windows Computer Description"]},{"id":"controls/windows.system.packages.saltstack.rb","controls":["Saltstack Package Installed"]}],"controls":[{"id":"Operating System","title":"","desc":null,"descriptions":[],"impact":0.5,"refs":[],"tags":{},"code":"control 'Operating System' do\n  title ''\n  # only_if {\n  #   !registry_key('HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion')['ProductName'].match? \"Enterprise\"\n  # }\n  # describe os.family do\n  #   it { should eq 'windows' }\n  # end\n  describe.one do\n    describe os.name do\n      it { should include 'windows' }\n    end\n  end\n\n  # describe os.windows? do\n  #   it { should eq true }\n  # end\n\n  # describe.one do\n  #   describe os.release do\n  #     it { should include '10.0' }\n  #   end\n  # end\n\n  # describe.one do\n  #   describe os.arch do\n  #     it { should eq 'x86_64' }\n  #   end\n  # end\n\n  # describe registry_key('HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion') do\n  #   its('ProductName') { should_not match 'Server' }\n  # end\n\n  # # it { should have_property_value 'value' }\n  # describe registry_key('HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion')['ProductName'] do\n  #   it { should match 'Enterprise' }\n  # end\nend\n","source_location":{"line":15,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/os.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"windows_10_enterprise_evaluation should include \"windows\"","run_time":0.0001082,"start_time":"2020-03-12T13:08:17-04:00"}]},{"id":"Windows AppX Provisioned Package Uninstalled","title":"salt.formula.windows.system.packages.appx.provisioned.uninstalled","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"","ref":""}],"tags":{"timezone":null,"saltstack":null,"salt.formula.windows.system.packages.appx":null,"salt.formula.windows.system.packages.appx.provisioned.uninstalled":null,"configuration management":null},"code":"control 'Windows AppX Provisioned Package Uninstalled' do\n  impact 'critical'\n  title 'salt.formula.windows.system.packages.appx.provisioned.uninstalled'\n  tag 'timezone', 'saltstack', 'salt.formula.windows.system.packages.appx',\n      'salt.formula.windows.system.packages.appx.provisioned.uninstalled',\n      'configuration management'\n  ref '', url: ''\n  pillar_packages_appx = pillar.dig('windows', 'system', 'packages', 'appx')\n  # There is a bug with multiple only_if statements, if any fail it will always report that\n  # it `Skipped control due to only_if condition:` for the last only_if statement.\n  only_if 'appx provisioned is enabled in pillar' do\n    !pillar_packages_appx.nil? && pillar_packages_appx['enabled']\n  end\n  only_if '`uninstalled` key is iterable' do\n    pillar_packages_appx.dig('provisioned', 'uninstalled').respond_to? :each\n  end\n  # require 'pp'; pp\n  pillar_packages_appx.dig('provisioned', 'uninstalled').each do |package|\n    describe windows_appx(package[0]) do\n      it { should_not be_installed }\n    end\n  end\nend\n","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.formula.windows.system.packages.appx.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Windows AppX Provisioned Package `Microsoft.MicrosoftSolitaireCollection` should not be installed","run_time":0.2628499,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Windows AppX Provisioned Package `Microsoft.Wallet` should not be installed","run_time":0.0641492,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Windows AppX Provisioned Package `Microsoft.ZuneMusic` should not be installed","run_time":0.0403785,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Windows AppX Provisioned Package `Microsoft.ZuneVideo` should not be installed","run_time":0.0531349,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Windows AppX Provisioned Package `Microsoft.MixedReality.Portal` should not be installed","run_time":0.0370541,"start_time":"2020-03-12T13:08:17-04:00"}]},{"id":"Chocolatey Package Installed","title":"salt.formula.windows.system.packages.chocolatey","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.chocolatey.html#salt.states.chocolatey.installed","ref":"salt.states.chocolatey.installed"}],"tags":{"timezone":null,"saltstack":null,"salt.states.chocolatey":null,"salt.states.chocolatey.installed":null,"salt.formula.windows.system.packages.chocolatey":null,"configuration management":null},"code":"control 'Chocolatey Package Installed' do\n  impact 'critical'\n  title 'salt.formula.windows.system.packages.chocolatey'\n  tag 'timezone', 'saltstack', 'salt.states.chocolatey', 'salt.states.chocolatey.installed',\n      'salt.formula.windows.system.packages.chocolatey', 'configuration management'\n  ref 'salt.states.chocolatey.installed',\n      url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.chocolatey.html#salt.states.chocolatey.installed'\n  pillar_chocolatey = pillar.dig('windows', 'system', 'packages', 'chocolatey')\n  # There is a bug with multiple only_if statements, if any fail it will always report that\n  # it `Skipped control due to only_if condition:` for the last only_if statement.\n  only_if 'chocolatey is enabled in pillar' do\n    !pillar_chocolatey.nil? && pillar_chocolatey['enabled']\n  end\n  only_if '`installed` key is iterable' do\n    pillar_chocolatey.dig('installed').respond_to? :each\n  end\n  only_if 'chocolatey is installed' do\n    command('choco').exist?\n  end\n  # require 'pry'; binding.pry;\n  # require 'pp'; puts \"CHOCOLATEY: \"; pp pillar_chocolatey;\n  pillar_chocolatey.dig('installed').each do |package|\n    # pillar_chocolatey['installed'].each do |package|\n    # print \": \"; pp\n    # print \"package: \"; pp package # [\"notepadplusplus\", nil], [\"windirstat\", {\"version\"=>\"1.1.2.20161210\"}]\n    # print \"package[0]: \"; pp package[0] # \"notepadplusplus\", \"windirstat\"\n    # print \"package[1]: \"; pp package[1] # nil/\"None\":String, {\"version\"=>\"1.1.2.20161210\"}\n    # print \"package[1].nil?: \"; pp package[1].nil?\n    # print \"package[1].is_a? String: \"; pp (package[1].is_a? String)\n    # print \"package[1].respond_to?(:key?): \"; pp (package[1].respond_to?(:key?))\n    # print \"package[1] == \\\"None\\\": \"; pp (package[1] == \"None\")\n    # unless package[1].nil? or package[1].kind_of?(String)\n    describe chocolatey_package(package[0]) do\n      it { should be_installed }\n      if (package[1].respond_to? :key?) && package[1].key?('version')\n        its ('version') { should cmp package[1]['version'] }\n      end\n    end\n  end\nend\n","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.formula.windows.system.packages.chocolatey.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Chocolatey package notepadplusplus should be installed","run_time":0.0001256,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Chocolatey package windirstat should be installed","run_time":7.68e-05,"start_time":"2020-03-12T13:08:17-04:00"},{"status":"passed","code_desc":"Chocolatey package windirstat version should cmp == \"1.1.2.20161210\"","run_time":0.0001565,"start_time":"2020-03-12T13:08:17-04:00"}]},{"id":"Windows Features","title":"salt.formula.windows.system.server.features","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_servermanager.html#salt.states.win_servermanager.installed","ref":"salt.states.win_servermanager.installed"}],"tags":{"timezone":null,"saltstack":null,"salt.states.win_servermanager":null,"salt.states.win_servermanager.installed":null,"salt.formula.windows.system.server.features.enabled":null,"configuration management":null},"code":"control 'Windows Features' do\n  impact 'critical'\n  title 'salt.formula.windows.system.server.features'\n  tag 'timezone','saltstack','salt.states.win_servermanager','salt.states.win_servermanager.installed','salt.formula.windows.system.server.features.enabled','configuration management'\n  ref 'salt.states.win_servermanager.installed', url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_servermanager.html#salt.states.win_servermanager.installed'\n  pillar_server_features = pillar.dig('windows', 'system', 'server', 'features')\n  # There is a bug with multiple only_if statements, if any fail it will always report that\n  # it `Skipped control due to only_if condition:` for the last only_if statement.\n  only_if (\"server features is enabled in pillar\") do\n    !pillar_server_features.nil? and pillar_server_features['enabled']\n  end\n  only_if (\"`installed` key is iterable\") do\n    pillar_server_features.dig('installed').respond_to? :each\n  end\n  only_if (\"only supported on servers\") do\n    server?\n    # registry_key('HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion')['ProductName'].match? \"Server\"\n  end\n  pillar_server_features.dig('installed').each do |feature|\n    describe windows_feature(feature[0]) do\n      it{ should be_installed }\n    end\n  end\nend\n","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.formula.windows.system.server.features.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"No-op","run_time":7.8e-06,"start_time":"2020-03-12T13:08:17-04:00","resource":"No-op","skip_message":"Skipped control due to only_if condition: only supported on servers"}]},{"id":"Chocolatey Installed","title":"salt.modules.chocolatey.bootstrap","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.chocolatey.html#salt.modules.chocolatey.bootstrap","ref":"salt.modules.chocolatey.bootstrap"}],"tags":{"chocolatey":null,"saltstack":null,"alt.modules.chocolatey":null,"salt.modules.chocolatey.bootstrap":null,"windows.system.packages.chocolatey":null,"configuration management":null,"application":null,"program":null},"code":"control 'Chocolatey Installed' do\n  impact 'critical'\n  title 'salt.modules.chocolatey.bootstrap'\n  tag 'chocolatey','saltstack','alt.modules.chocolatey','salt.modules.chocolatey.bootstrap','windows.system.packages.chocolatey','configuration management','application','program'\n  ref 'salt.modules.chocolatey.bootstrap', url: 'https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.chocolatey.html#salt.modules.chocolatey.bootstrap'\n  #require 'pry'; binding.pry;\n  # C:\\ProgramData\\chocolatey\\bin\\choco.exe\n  pillar_chocolatey = pillar.dig('windows', 'system', 'packages', 'chocolatey')\n  only_if (\"chocolatey is enabled in pillar\") do\n    !pillar_chocolatey.nil? and pillar_chocolatey['enabled']\n    # !highstate_module_chocolatey_bootstrap.nil?\n  end\n  describe command('choco') do\n    it { should exist }\n  end\nend","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.modules.chocolatey.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `choco` should exist","run_time":0.0561134,"start_time":"2020-03-12T13:08:17-04:00"}]},{"id":"Windows Timezone","title":"salt.states.timezone.system","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.timezone.html#salt.states.timezone.system","ref":"salt.states.timezone.system"}],"tags":{"timezone":null,"saltstack":null,"salt.states.timezone":null,"salt.states.timezone.system":null,"configuration management":null},"code":"control 'Windows Timezone' do\n  impact 'critical'\n  title 'salt.states.timezone.system'\n  tag 'timezone','saltstack','salt.states.timezone','salt.states.timezone.system','configuration management'\n  ref 'salt.states.timezone.system', url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.timezone.html#salt.states.timezone.system'\n  timezone = pillar.dig('windows', 'states', 'timezone', 'system', 'name')\n  only_if (\"timezone is defined in pillar\") do\n    !timezone.nil?\n  end\n  #require 'pry'; binding.pry;\n  describe windows_timezone(timezone) do\n    it { should be_set }\n  end\nend","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.states.timezone.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"`Eastern Standard Time` timezone (converted from America/New_York) should be set","run_time":0.4628311,"start_time":"2020-03-12T13:08:17-04:00"}]},{"id":"Windows Optional Features","title":"salt.states.win_dism.feature_installed","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_dism.html#salt.states.win_dism.feature_installed","ref":"salt.states.win_dism.feature_installed"}],"tags":{"optional feature":null,"saltstack":null,"salt.states.win_dism":null,"salt.states.win_dism.feature_installed":null,"configuration management":null},"code":"control 'Windows Optional Features' do\n  impact 'critical'\n  title 'salt.states.win_dism.feature_installed'\n  tag 'optional feature','saltstack','salt.states.win_dism','salt.states.win_dism.feature_installed','configuration management'\n  ref 'salt.states.win_dism.feature_installed', url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_dism.html#salt.states.win_dism.feature_installed'\n  pillar_optional_features = pillar.dig('windows', 'system', 'desktop', 'optional_features')\n\n  only_if (\"optional features is enabled in pillar\") do\n    !pillar_optional_features.nil? and pillar_optional_features['enabled']\n  end\n  #require 'pry'; binding.pry;\n  pillar_optional_features['installed'].each do |optional_feature|\n    describe windows_optional_feature(optional_feature[0]) do\n      it{ should be_installed }\n    end\n  end\nend\n","source_location":{"line":23,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.states.win_dism.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Windows Optional Feature: `TelnetClient` should be installed","run_time":3.1307832,"start_time":"2020-03-12T13:08:18-04:00"}]},{"id":"Windows Computer Hostname","title":"salt.states.win_system.hostname","desc":"If not set correctly check if there is a pending rename to the correct hostname after reboot.","descriptions":[{"label":"default","data":"If not set correctly check if there is a pending rename to the correct hostname after reboot."}],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_system.html#salt.states.win_system.hostname","ref":"salt.states.win_system.hostname"}],"tags":{"hostname":null,"saltstack":null,"salt.states.win_system":null,"salt.states.win_system.hostname":null,"configuration management":null},"code":"control 'Windows Computer Hostname' do\n  impact 'critical'\n  title 'salt.states.win_system.hostname'\n  tag 'hostname','saltstack','salt.states.win_system','salt.states.win_system.hostname','configuration management'\n  ref 'salt.states.win_system.hostname', url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_system.html#salt.states.win_system.hostname'\n  desc 'Check if hostname is set correctly.'\n  desc 'If not set correctly check if there is a pending rename to the correct hostname after reboot.'\n  pillar_hostname = pillar.dig('windows', 'states', 'system', 'hostname', 'name')\n  only_if (\"hostname is defined in pillar\") do\n    !pillar_hostname.nil?\n    # and reboot is enabled\n    #and pillar.dig('windows', 'modules', 'system', 'reboot', 'enabled')\n  end\n  # only_if (\"Running in CI environment, not able to reboot, skipping test.\") do\n  #   ENV[\"CI\"] != 'True'\n  # end\n  #require 'pry'; binding.pry;\\\n  computername_value = registry_key('HKLM\\SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ActiveComputerName')['ComputerName']\n  ActiveComputerName_value = registry_key('HKLM\\SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName')['ComputerName']\n  # puts \"ComputerName: #{computername_value}\"\n  # puts \"ActiveComputerName: #{ActiveComputerName_value}\"\n  describe.one do\n  # if (computername_value == pillar_hostname)\n    describe sys_info do\n      its('hostname') { should cmp pillar_hostname }\n    end\n  # elsif (ActiveComputerName_value == pillar_hostname)\n    describe registry_key('HKLM\\SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName') do\n      its('ComputerName') { should cmp pillar_hostname }\n    end \n  end\nend\n","source_location":{"line":24,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.states.win_system.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"System Information hostname should cmp == \"saltstack1\"","run_time":0.0165947,"start_time":"2020-03-12T13:08:21-04:00"},{"status":"passed","code_desc":"Registry Key HKLM\\SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName ComputerName should cmp == \"saltstack1\"","run_time":0.000168,"start_time":"2020-03-12T13:08:21-04:00"}]},{"id":"Windows Computer Description","title":"salt.states.win_system.computer_desc","desc":null,"descriptions":[],"impact":0.6,"refs":[{"url":"https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_system.html#salt.states.win_system.computer_desc","ref":"salt.states.win_system.computer_desc"}],"tags":{"computer description":null,"saltstack":null,"salt.states.win_system":null,"salt.states.win_system.computer_desc":null,"configuration management":null},"code":"control 'Windows Computer Description' do\n  impact 0.6\n  title 'salt.states.win_system.computer_desc'\n  tag 'computer description','saltstack','salt.states.win_system','salt.states.win_system.computer_desc','configuration management'\n  ref 'salt.states.win_system.computer_desc', url: 'https://docs.saltstack.com/en/master/ref/states/all/salt.states.win_system.html#salt.states.win_system.computer_desc'\n  pillar_computer_description = pillar.dig('windows', 'states', 'system', 'computer_desc', 'name')\n  only_if ('computer description is defined in pillar') do\n    !pillar_computer_description.nil?\n  end\n  ps_cmd = \"Get-WmiObject -Class Win32_OperatingSystem | Select Description -ExpandProperty description\"\n  #require 'pry'; binding.pry;\n  describe powershell(ps_cmd) do\n    its('stdout') { should match pillar_computer_description }\n  end\nend","source_location":{"line":57,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/salt.states.win_system.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Powershell stdout should match \"Saltstack Computer Description\"","run_time":0.0948146,"start_time":"2020-03-12T13:08:21-04:00"}]},{"id":"Saltstack Package Installed","title":"windows.system.packages.saltstack.installed","desc":null,"descriptions":[],"impact":0.9,"refs":[{"url":"https://docs.saltstack.com/en/latest/ref/states/all/salt.states.pkg.html#salt.states.pkg.installed","ref":"salt.states.pkg.installed"}],"tags":{"package":null,"saltstack":null,"windows.system.packages.saltstack":null,"windows.system.packages.saltstack.installed":null,"configuration management":null},"code":"control 'Saltstack Package Installed' do\n  impact 'critical'\n  title 'windows.system.packages.saltstack.installed'\n  tag 'package','saltstack','windows.system.packages.saltstack','windows.system.packages.saltstack.installed','configuration management'\n  ref 'salt.states.pkg.installed', url: 'https://docs.saltstack.com/en/latest/ref/states/all/salt.states.pkg.html#salt.states.pkg.installed'\n  pillar_packages_saltstack = pillar.dig('windows', 'system', 'packages', 'saltstack')\n  # There is a bug with multiple only_if statements, if any fail it will always report that\n  # it `Skipped control due to only_if condition:` for the last only_if statement.\n  only_if (\"saltstack packages are enabled in pillar\") do\n    !pillar_packages_saltstack.nil? and pillar_packages_saltstack['enabled']\n  end\n  only_if (\"`installed` key is iterable\") do\n    pillar_packages_saltstack.dig('installed').respond_to? :each\n  end\n  # require 'pp'; pp\n  pillar_packages_saltstack.dig('installed').each do |package|\n    describe package(get_saltstack_package_full_name(package[0])) do\n      it { should be_installed }\n      if package[1].respond_to? :key?\n        if package[1].key?('version')\n          its('version') { should cmp package[1]['version'] }\n        end\n      end\n    end\n  end\nend\n","source_location":{"line":24,"ref":"/home/pmudd/projects/github/clearasmudd/windows-formula/test/integration/default/controls/windows.system.packages.saltstack.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"System Package Git should be installed","run_time":0.1472737,"start_time":"2020-03-12T13:08:21-04:00"},{"status":"passed","code_desc":"System Package 7-Zip should be installed","run_time":0.1640498,"start_time":"2020-03-12T13:08:21-04:00"},{"status":"passed","code_desc":"System Package 7-Zip version should cmp == \"18.06.00.0\"","run_time":0.1600124,"start_time":"2020-03-12T13:08:21-04:00"},{"status":"passed","code_desc":"System Package KDiff3 should be installed","run_time":0.1674381,"start_time":"2020-03-12T13:08:22-04:00"}]}],"status":"loaded"}],"statistics":{"duration":4.8945154},"version":"4.18.39"}
